const moment = require('moment');
const Logger = require('../utils/logger');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ÍßÅ‡º∫ ùì¢ùì∏ùìØùì≤ùîÇùì™ ‡ºªÍßÇ
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
 */
class CommandHandler {
    constructor(bot) {
        this.bot = bot;
        this.logger = new Logger('COMMAND');
        this.config = bot.config;
        
        // –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –Ω–∞ –º–µ—Ç–æ–¥—ã
        this.commands = {
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            '–≤—ã–∑–æ–≤': this.callAll.bind(this),
            '–≤–Ω–∏–º–∞–Ω–∏–µ': this.attention.bind(this),
            '—Å–Ω–µ—Å—Ç–∏': this.kickUser.bind(this),
            '—É–¥–∞–ª–∏—Ç—å': this.deleteMessages.bind(this),
            '–º–æ–ª—á—É–Ω—ã': this.findSilent.bind(this),
            '–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ': this.findInactive.bind(this),
            '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': this.getActivity.bind(this),
            
            // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
            '–∞–≤—Ç–æ–∞–¥–º–∏–Ω': this.autoAdmin.bind(this),
            '—Å–æ–∑–¥–∞—Ç–µ–ª—å': this.getCreator.bind(this),
            '—Å—Å—ã–ª–∫–∞': this.getGroupLink.bind(this),
            
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π
            '–∑–∞–∫—Ä—ã—Ç—å': this.closeGroup.bind(this),
            '–æ—Ç–∫—Ä—ã—Ç—å': this.openGroup.bind(this),
            
            // –ê–Ω—Ç–∏—Å–ø–∞–º —Å–∏—Å—Ç–µ–º–∞
            '–∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞': this.toggleAntiLink.bind(this),
            '–∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞2': this.toggleAntiLink2.bind(this),
            '–∞–Ω—Ç–∏–≤—ã–∑–æ–≤': this.toggleAntiCall.bind(this),
            '–∞–Ω—Ç–∏–ª–∏—á–∫–∞': this.toggleAntiPrivate.bind(this),
            '–∞–Ω—Ç–∏—É–¥–∞–ª–µ–Ω–∏–µ': this.toggleAntiDelete.bind(this),
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ': this.toggleWelcome.bind(this),
            '–æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å': this.toggleRestrict.bind(this),
            '–∞–≤—Ç–æ—á—Ç–µ–Ω–∏–µ': this.toggleAutoRead.bind(this),
            
            // –°–∏—Å—Ç–µ–º–∞ –∞—Ä–µ–Ω–¥—ã
            '–∞—Ä–µ–Ω–¥–∞': this.rental.bind(this),
            '—á–µ–∫–∞—Ä–µ–Ω–¥—ã': this.checkRental.bind(this),
            '—É–¥–∞–ª–∏—Ç—å–∞—Ä–µ–Ω–¥—É': this.deleteRental.bind(this),
            
            // –°–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            '–ø–æ–º–æ—â—å': this.help.bind(this),
            '—Å—Ç–∞—Ç—É—Å': this.status.bind(this)
        };
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
     */
    async handle(messageInfo) {
        try {
            const { text, chatId, senderId, isGroup } = messageInfo;
            
            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            const fullCommand = text.slice(this.config.bot.prefix.length).trim().toLowerCase();
            const [command, ...args] = fullCommand.split(' ');

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            if (!this.commands[command]) {
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            const hasAccess = await this.checkAccess(messageInfo, command);
            if (!hasAccess) {
                await this.sendNoPermission(chatId);
                return;
            }

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            this.logger.command(chatId, senderId, command, true);

            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            await this.commands[command](messageInfo, args);

        } catch (error) {
            this.logger.error('Command handling error:', error);
            this.logger.command(messageInfo.chatId, messageInfo.senderId, 'unknown', false);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ
     */
    async checkAccess(messageInfo, command) {
        const { chatId, senderId, isGroup } = messageInfo;
        
        // –í–ª–∞–¥–µ–ª–µ—Ü –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º
        if (this.isOwner(senderId)) {
            return true;
        }

        // –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø
        if (!isGroup && !['–ø–æ–º–æ—â—å', '—Å—Ç–∞—Ç—É—Å'].includes(command)) {
            return false;
        }

        // –ö–æ–º–∞–Ω–¥—ã –∞—Ä–µ–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –≥—Ä—É–ø–ø—ã
        if (['–∞—Ä–µ–Ω–¥–∞', '—á–µ–∫–∞—Ä–µ–Ω–¥—ã'].includes(command)) {
            return await this.isUserAdmin(chatId, senderId);
        }

        // –ö–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
        if (command === '—É–¥–∞–ª–∏—Ç—å–∞—Ä–µ–Ω–¥—É') {
            return this.isOwner(senderId);
        }

        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        return await this.isUserAdmin(chatId, senderId);
    }

    // ===========================================
    // –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –£–ß–ê–°–¢–ù–ò–ö–ê–ú–ò
    // ===========================================

    /**
     * –ö–æ–º–∞–Ω–¥–∞: –≤—ã–∑–æ–≤ - –º–∞—Å—Å–æ–≤—ã–π –≤—ã–∑–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    async callAll(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            const groupInfo = await this.bot.getGroupInfo(chatId);
            
            if (!groupInfo) {
                await this.bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ');
                return;
            }

            const participants = groupInfo.participants
                .filter(p => !p.id.includes(this.bot.sock.user.id))
                .map(p => p.id);

            if (participants.length === 0) {
                await this.bot.sendMessage(chatId, '‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–∑–æ–≤–∞');
                return;
            }

            const message = args.length > 0 ? args.join(' ') : 'üì¢ –í—Å–µ–æ–±—â–∏–π –≤—ã–∑–æ–≤!';
            const mentions = participants.slice(0, 50); // –õ–∏–º–∏—Ç –Ω–∞ 50 —É–ø–æ–º–∏–Ω–∞–Ω–∏–π

            await this.bot.sendMessage(chatId, `${message}\n\n${mentions.map(p => `@${p.split('@')[0]}`).join(' ')}`, {
                mentions: mentions
            });

            this.logger.moderation(chatId, 'call_all', null, `${mentions.length} participants`);

        } catch (error) {
            this.logger.error('Call all error:', error);
            await this.bot.sendMessage(messageInfo.chatId, '‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã');
        }
    }

    /**
     * –ö–æ–º–∞–Ω–¥–∞: –≤–Ω–∏–º–∞–Ω–∏–µ - –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
     */
    async attention(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            const message = args.length > 0 ? args.join(' ') : '–í–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!';
            
            await this.bot.sendMessage(chatId, `üö® *–í–ù–ò–ú–ê–ù–ò–ï!* üö®\n\n${message}`);
            
        } catch (error) {
            this.logger.error('Attention error:', error);
        }
    }

    /**
     * –ö–æ–º–∞–Ω–¥–∞: —Å–Ω–µ—Å—Ç–∏ - —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
     */
    async kickUser(messageInfo, args) {
        try {
            const { chatId, quotedMessage } = messageInfo;
            
            let targetUser = null;
            
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
            if (quotedMessage && quotedMessage.key) {
                targetUser = quotedMessage.key.participant || quotedMessage.key.remoteJid;
            } else if (args.length > 0) {
                const number = args[0].replace(/[^0-9]/g, '');
                if (number.length >= 10) {
                    targetUser = number + '@s.whatsapp.net';
                }
            }

            if (!targetUser) {
                await this.bot.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä');
                return;
            }

            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            await this.bot.sock.groupParticipantsUpdate(chatId, [targetUser], 'remove');
            
            await this.bot.sendMessage(chatId, `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${targetUser.split('@')[0]} —É–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã`, {
                mentions: [targetUser]
            });

            this.logger.moderation(chatId, 'kick_user', targetUser);

        } catch (error) {
            this.logger.error('Kick user error:', error);
            await this.bot.sendMessage(messageInfo.chatId, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    }

    /**
     * –ö–æ–º–∞–Ω–¥–∞: —É–¥–∞–ª–∏—Ç—å - —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    async deleteMessages(messageInfo, args) {
        try {
            const { chatId, quotedMessage } = messageInfo;
            
            if (!quotedMessage) {
                await this.bot.sendMessage(chatId, '‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
                return;
            }

            // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await this.bot.sock.sendMessage(chatId, {
                delete: quotedMessage.key
            });

            // –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(async () => {
                try {
                    await this.bot.sock.sendMessage(chatId, {
                        delete: messageInfo.message.key
                    });
                } catch (err) {
                    this.logger.warn('Failed to delete command message:', err);
                }
            }, 3000);

            this.logger.moderation(chatId, 'delete_message', quotedMessage.key.participant);

        } catch (error) {
            this.logger.error('Delete message error:', error);
        }
    }

    /**
     * –ö–æ–º–∞–Ω–¥–∞: –º–æ–ª—á—É–Ω—ã - –ø–æ–∏—Å–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    async findSilent(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            const days = parseInt(args[0]) || 30;
            
            const silentUsers = this.bot.database.getInactiveUsers(chatId, days);
            
            if (silentUsers.length === 0) {
                await this.bot.sendMessage(chatId, `‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${days} –¥–Ω–µ–π`);
                return;
            }

            let message = `üîá *–ú–æ–ª—á—É–Ω—ã –∑–∞ ${days} –¥–Ω–µ–π:*\n\n`;
            
            for (const user of silentUsers.slice(0, 20)) {
                const lastSeen = user.lastSeen ? moment(user.lastSeen).fromNow() : '–Ω–∏–∫–æ–≥–¥–∞';
                message += `‚Ä¢ @${user.userId.split('@')[0]} - ${lastSeen}\n`;
            }

            if (silentUsers.length > 20) {
                message += `\n... –∏ –µ—â–µ ${silentUsers.length - 20} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`;
            }

            await this.bot.sendMessage(chatId, message, {
                mentions: silentUsers.slice(0, 20).map(u => u.userId)
            });

        } catch (error) {
            this.logger.error('Find silent error:', error);
        }
    }

    /**
     * –ö–æ–º–∞–Ω–¥–∞: –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ - –∞–Ω–∞–ª–∏–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    async findInactive(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            const days = parseInt(args[0]) || 7;
            
            const inactiveUsers = this.bot.database.getInactiveUsers(chatId, days);
            const groupInfo = await this.bot.getGroupInfo(chatId);
            
            const totalParticipants = groupInfo?.participants?.length || 0;
            const activeUsers = totalParticipants - inactiveUsers.length;
            
            let message = `üìä *–ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ ${days} –¥–Ω–µ–π:*\n\n`;
            message += `üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${totalParticipants}\n`;
            message += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: ${activeUsers}\n`;
            message += `üí§ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: ${inactiveUsers.length}\n\n`;
            
            if (inactiveUsers.length > 0) {
                message += `*–°–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö:*\n`;
                for (const user of inactiveUsers.slice(0, 15)) {
                    const lastSeen = user.lastSeen ? moment(user.lastSeen).fromNow() : '–Ω–∏–∫–æ–≥–¥–∞';
                    message += `‚Ä¢ @${user.userId.split('@')[0]} - ${lastSeen}\n`;
                }
                
                if (inactiveUsers.length > 15) {
                    message += `\n... –∏ –µ—â–µ ${inactiveUsers.length - 15} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`;
                }
            }

            await this.bot.sendMessage(chatId, message);

        } catch (error) {
            this.logger.error('Find inactive error:', error);
        }
    }

    /**
     * –ö–æ–º–∞–Ω–¥–∞: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    async getActivity(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            const groupInfo = await this.bot.getGroupInfo(chatId);
            const rental = this.bot.database.getRental(chatId);
            
            let message = `üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã:*\n\n`;
            message += `üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${groupInfo?.participants?.length || 0}\n`;
            message += `üìÖ –°–æ–∑–¥–∞–Ω–∞: ${groupInfo?.creation ? moment(groupInfo.creation * 1000).format('DD.MM.YYYY') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
            
            if (rental) {
                const timeLeft = moment(rental.endDate).fromNow();
                message += `üí∞ –ê—Ä–µ–Ω–¥–∞ –¥–æ: ${timeLeft}\n`;
                message += `üìã –¢–∞—Ä–∏—Ñ: ${rental.plan}\n`;
            }
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            const recentActivity = this.bot.database.getInactiveUsers(chatId, 7);
            const activeCount = (groupInfo?.participants?.length || 0) - recentActivity.length;
            
            message += `\nüìä *–ó–∞ 7 –¥–Ω–µ–π:*\n`;
            message += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: ${activeCount}\n`;
            message += `üí§ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: ${recentActivity.length}\n`;

            await this.bot.sendMessage(chatId, message);

        } catch (error) {
            this.logger.error('Get activity error:', error);
        }
    }

    // ===========================================
    // –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–Ø
    // ===========================================

    /**
     * –ö–æ–º–∞–Ω–¥–∞: –∞–≤—Ç–æ–∞–¥–º–∏–Ω - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
     */
    async autoAdmin(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            const settings = this.bot.database.getGroupSettings(chatId);
            
            settings.moderation.autoAdmin = !settings.moderation.autoAdmin;
            await this.bot.database.updateGroupSettings(chatId, settings);
            
            const status = settings.moderation.autoAdmin ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω';
            await this.bot.sendMessage(chatId, `‚öôÔ∏è –ê–≤—Ç–æ–∞–¥–º–∏–Ω ${status}`);

        } catch (error) {
            this.logger.error('Auto admin error:', error);
        }
    }

    /**
     * –ö–æ–º–∞–Ω–¥–∞: —Å–æ–∑–¥–∞—Ç–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
     */
    async getCreator(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            const groupInfo = await this.bot.getGroupInfo(chatId);
            
            if (!groupInfo) {
                await this.bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ');
                return;
            }

            const creator = groupInfo.participants.find(p => p.admin === 'superadmin');
            
            if (creator) {
                await this.bot.sendMessage(chatId, `üëë –°–æ–∑–¥–∞—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã: @${creator.id.split('@')[0]}`, {
                    mentions: [creator.id]
                });
            } else {
                await this.bot.sendMessage(chatId, '‚ùå –°–æ–∑–¥–∞—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

        } catch (error) {
            this.logger.error('Get creator error:', error);
        }
    }

    /**
     * –ö–æ–º–∞–Ω–¥–∞: —Å—Å—ã–ª–∫–∞ - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É
     */
    async getGroupLink(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            
            const inviteCode = await this.bot.sock.groupInviteCode(chatId);
            const link = `https://chat.whatsapp.com/${inviteCode}`;
            
            await this.bot.sendMessage(chatId, `üîó *–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É:*\n\n${link}`);

        } catch (error) {
            this.logger.error('Get group link error:', error);
            await this.bot.sendMessage(messageInfo.chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É');
        }
    }

    // ===========================================
    // –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–†–£–ü–ü–û–ô
    // ===========================================

    /**
     * –ö–æ–º–∞–Ω–¥–∞: –∑–∞–∫—Ä—ã—Ç—å - –∑–∞–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø—ã
     */
    async closeGroup(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            
            await this.bot.sock.groupSettingUpdate(chatId, 'announcement');
            await this.bot.sendMessage(chatId, 'üîí –ì—Ä—É–ø–ø–∞ –∑–∞–∫—Ä—ã—Ç–∞. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è');

        } catch (error) {
            this.logger.error('Close group error:', error);
        }
    }

    /**
     * –ö–æ–º–∞–Ω–¥–∞: –æ—Ç–∫—Ä—ã—Ç—å - –æ—Ç–∫—Ä—ã—Ç–∏–µ –≥—Ä—É–ø–ø—ã
     */
    async openGroup(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            
            await this.bot.sock.groupSettingUpdate(chatId, 'not_announcement');
            await this.bot.sendMessage(chatId, 'üîì –ì—Ä—É–ø–ø–∞ –æ—Ç–∫—Ä—ã—Ç–∞. –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è');

        } catch (error) {
            this.logger.error('Open group error:', error);
        }
    }

    // ===========================================
    // –ö–û–ú–ê–ù–î–´ –ê–ù–¢–ò–°–ü–ê–ú –°–ò–°–¢–ï–ú–´
    // ===========================================

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω—Ç–∏—Å–ø–∞–º —Ñ—É–Ω–∫—Ü–∏–π
     */
    async toggleAntiSpamFeature(messageInfo, feature, name) {
        try {
            const { chatId } = messageInfo;
            const settings = this.bot.database.getGroupSettings(chatId);
            
            settings.antiSpam[feature] = !settings.antiSpam[feature];
            await this.bot.database.updateGroupSettings(chatId, settings);
            
            const status = settings.antiSpam[feature] ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞';
            await this.bot.sendMessage(chatId, `üõ°Ô∏è ${name} ${status}`);

        } catch (error) {
            this.logger.error(`Toggle ${feature} error:`, error);
        }
    }

    async toggleAntiLink(messageInfo, args) {
        await this.toggleAntiSpamFeature(messageInfo, 'antiLink', '–ê–Ω—Ç–∏—Å—Å—ã–ª–∫–∞');
    }

    async toggleAntiLink2(messageInfo, args) {
        await this.toggleAntiSpamFeature(messageInfo, 'antiLink2', '–ê–Ω—Ç–∏—Å—Å—ã–ª–∫–∞ 2');
    }

    async toggleAntiCall(messageInfo, args) {
        await this.toggleAntiSpamFeature(messageInfo, 'antiCall', '–ê–Ω—Ç–∏–≤—ã–∑–æ–≤');
    }

    async toggleAntiPrivate(messageInfo, args) {
        await this.toggleAntiSpamFeature(messageInfo, 'antiPrivate', '–ê–Ω—Ç–∏–ª–∏—á–∫–∞');
    }

    async toggleAntiDelete(messageInfo, args) {
        await this.toggleAntiSpamFeature(messageInfo, 'antiDelete', '–ê–Ω—Ç–∏—É–¥–∞–ª–µ–Ω–∏–µ');
    }

    // ===========================================
    // –ö–û–ú–ê–ù–î–´ –ù–ê–°–¢–†–û–ï–ö
    // ===========================================

    async toggleWelcome(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            const settings = this.bot.database.getGroupSettings(chatId);
            
            settings.moderation.welcome = !settings.moderation.welcome;
            await this.bot.database.updateGroupSettings(chatId, settings);
            
            const status = settings.moderation.welcome ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ';
            await this.bot.sendMessage(chatId, `üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ${status}`);

        } catch (error) {
            this.logger.error('Toggle welcome error:', error);
        }
    }

    async toggleRestrict(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            const settings = this.bot.database.getGroupSettings(chatId);
            
            settings.moderation.restrict = !settings.moderation.restrict;
            await this.bot.database.updateGroupSettings(chatId, settings);
            
            const status = settings.moderation.restrict ? '–≤–∫–ª—é—á–µ–Ω—ã' : '–≤—ã–∫–ª—é—á–µ–Ω—ã';
            await this.bot.sendMessage(chatId, `üö´ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ${status}`);

        } catch (error) {
            this.logger.error('Toggle restrict error:', error);
        }
    }

    async toggleAutoRead(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            const settings = this.bot.database.getGroupSettings(chatId);
            
            settings.moderation.autoRead = !settings.moderation.autoRead;
            await this.bot.database.updateGroupSettings(chatId, settings);
            
            const status = settings.moderation.autoRead ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ';
            await this.bot.sendMessage(chatId, `üëÅÔ∏è –ê–≤—Ç–æ—á—Ç–µ–Ω–∏–µ ${status}`);

        } catch (error) {
            this.logger.error('Toggle auto read error:', error);
        }
    }

    // ===========================================
    // –ö–û–ú–ê–ù–î–´ –°–ò–°–¢–ï–ú–´ –ê–†–ï–ù–î–´
    // ===========================================

    /**
     * –ö–æ–º–∞–Ω–¥–∞: –∞—Ä–µ–Ω–¥–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–æ–π
     */
    async rental(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            const rental = this.bot.database.getRental(chatId);
            
            if (rental && this.bot.database.isRentalActive(chatId)) {
                // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∞—Ä–µ–Ω–¥—É
                const timeLeft = moment(rental.endDate).fromNow();
                let message = `üí∞ *–ê–∫—Ç–∏–≤–Ω–∞—è –∞—Ä–µ–Ω–¥–∞*\n\n`;
                message += `üìã –¢–∞—Ä–∏—Ñ: ${rental.plan}\n`;
                message += `‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${timeLeft}\n`;
                message += `üìÖ –î–æ: ${moment(rental.endDate).format('DD.MM.YYYY HH:mm')}\n\n`;
                message += `üìû –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è: wa.me/${this.config.bot.ownerNumber}`;
                
                await this.bot.sendMessage(chatId, message);
            } else {
                // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã
                const rentalInfo = this.generateRentalInfo(chatId);
                await this.bot.sendMessage(chatId, rentalInfo);
            }

        } catch (error) {
            this.logger.error('Rental error:', error);
        }
    }

    /**
     * –ö–æ–º–∞–Ω–¥–∞: —á–µ–∫–∞—Ä–µ–Ω–¥—ã - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞—Ä–µ–Ω–¥—ã
     */
    async checkRental(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            const rental = this.bot.database.getRental(chatId);
            
            if (!rental) {
                await this.bot.sendMessage(chatId, '‚ùå –ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            const isActive = this.bot.database.isRentalActive(chatId);
            const timeLeft = moment(rental.endDate).fromNow();
            
            let message = `üìä *–°—Ç–∞—Ç—É—Å –∞—Ä–µ–Ω–¥—ã:*\n\n`;
            message += `üîπ –°—Ç–∞—Ç—É—Å: ${isActive ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ò—Å—Ç–µ–∫–ª–∞'}\n`;
            message += `üìã –¢–∞—Ä–∏—Ñ: ${rental.plan}\n`;
            message += `üìÖ –ù–∞—á–∞–ª–æ: ${moment(rental.startDate).format('DD.MM.YYYY HH:mm')}\n`;
            message += `üìÖ –ö–æ–Ω–µ—Ü: ${moment(rental.endDate).format('DD.MM.YYYY HH:mm')}\n`;
            message += `‚è∞ ${isActive ? '–ò—Å—Ç–µ–∫–∞–µ—Ç' : '–ò—Å—Ç–µ–∫–ª–∞'}: ${timeLeft}`;

            await this.bot.sendMessage(chatId, message);

        } catch (error) {
            this.logger.error('Check rental error:', error);
        }
    }

    /**
     * –ö–æ–º–∞–Ω–¥–∞: —É–¥–∞–ª–∏—Ç—å–∞—Ä–µ–Ω–¥—É - —É–¥–∞–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü)
     */
    async deleteRental(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            
            const rental = this.bot.database.getRental(chatId);
            if (!rental) {
                await this.bot.sendMessage(chatId, '‚ùå –ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }

            this.bot.database.cache.rentals.delete(chatId);
            await this.bot.database.saveData('rentals');
            
            await this.bot.sendMessage(chatId, '‚úÖ –ê—Ä–µ–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∞');
            this.logger.rental(chatId, 'deleted');

        } catch (error) {
            this.logger.error('Delete rental error:', error);
        }
    }

    // ===========================================
    // –°–õ–£–ñ–ï–ë–ù–´–ï –ö–û–ú–ê–ù–î–´
    // ===========================================

    /**
     * –ö–æ–º–∞–Ω–¥–∞: –ø–æ–º–æ—â—å - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
     */
    async help(messageInfo, args) {
        try {
            const { chatId, senderId, isGroup } = messageInfo;
            const isAdmin = isGroup ? await this.isUserAdmin(chatId, senderId) : false;
            const isOwner = this.isOwner(senderId);
            
            let message = `‚ÑπÔ∏è *ÍßÅ‡º∫ ùì¢ùì∏ùìØùì≤ùîÇùì™ ‡ºªÍßÇ - –ü–æ–º–æ—â—å*\n\n`;
            
            if (isGroup && (isAdmin || isOwner)) {
                message += `üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:*\n`;
                message += `‚Ä¢ .–≤—ã–∑–æ–≤ [—Ç–µ–∫—Å—Ç] - –º–∞—Å—Å–æ–≤—ã–π –≤—ã–∑–æ–≤\n`;
                message += `‚Ä¢ .–≤–Ω–∏–º–∞–Ω–∏–µ [—Ç–µ–∫—Å—Ç] - –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ\n`;
                message += `‚Ä¢ .—Å–Ω–µ—Å—Ç–∏ - —É–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞\n`;
                message += `‚Ä¢ .—É–¥–∞–ª–∏—Ç—å - —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n`;
                message += `‚Ä¢ .–º–æ–ª—á—É–Ω—ã [–¥–Ω–∏] - –Ω–∞–π—Ç–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö\n`;
                message += `‚Ä¢ .–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã\n\n`;
                
                message += `‚öôÔ∏è *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:*\n`;
                message += `‚Ä¢ .–∞–≤—Ç–æ–∞–¥–º–∏–Ω - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∞–¥–º–∏–Ω\n`;
                message += `‚Ä¢ .—Å–æ–∑–¥–∞—Ç–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ\n`;
                message += `‚Ä¢ .—Å—Å—ã–ª–∫–∞ - –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –≥—Ä—É–ø–ø—ã\n`;
                message += `‚Ä¢ .–∑–∞–∫—Ä—ã—Ç—å/.–æ—Ç–∫—Ä—ã—Ç—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π\n\n`;
                
                message += `üõ°Ô∏è *–ê–Ω—Ç–∏—Å–ø–∞–º:*\n`;
                message += `‚Ä¢ .–∞–Ω—Ç–∏—Å—Å—ã–ª–∫–∞ - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å—Å—ã–ª–æ–∫\n`;
                message += `‚Ä¢ .–∞–Ω—Ç–∏–≤—ã–∑–æ–≤ - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–ø–∞–º-–≤—ã–∑–æ–≤–æ–≤\n`;
                message += `‚Ä¢ .–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n\n`;
                
                message += `üí∞ *–ê—Ä–µ–Ω–¥–∞:*\n`;
                message += `‚Ä¢ .–∞—Ä–µ–Ω–¥–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–µ–Ω–¥–µ\n`;
                message += `‚Ä¢ .—á–µ–∫–∞—Ä–µ–Ω–¥—ã - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n`;
            } else {
                message += `üí∞ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n`;
                message += `‚Ä¢ .–∞—Ä–µ–Ω–¥–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ä–µ–Ω–¥–µ\n`;
                message += `‚Ä¢ .–ø–æ–º–æ—â—å - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n`;
            }
            
            message += `\nüìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: wa.me/${this.config.bot.ownerNumber}`;

            await this.bot.sendMessage(chatId, message);

        } catch (error) {
            this.logger.error('Help error:', error);
        }
    }

    /**
     * –ö–æ–º–∞–Ω–¥–∞: —Å—Ç–∞—Ç—É—Å - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
     */
    async status(messageInfo, args) {
        try {
            const { chatId } = messageInfo;
            const uptime = process.uptime();
            const hours = Math.floor(uptime / 3600);
            const minutes = Math.floor((uptime % 3600) / 60);
            
            let message = `ü§ñ *ÍßÅ‡º∫ ùì¢ùì∏ùìØùì≤ùîÇùì™ ‡ºªÍßÇ –°—Ç–∞—Ç—É—Å:*\n\n`;
            message += `‚úÖ –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω\n`;
            message += `‚è±Ô∏è –†–∞–±–æ—Ç–∞–µ—Ç: ${hours}—á ${minutes}–º\n`;
            message += `üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: ${this.bot.activeGroups.size}\n`;
            message += `üìä –í–µ—Ä—Å–∏—è: ${this.config.bot.version}\n`;
            message += `üîß –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Termux Optimized`;

            await this.bot.sendMessage(chatId, message);

        } catch (error) {
            this.logger.error('Status error:', error);
        }
    }

    // ===========================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // ===========================================

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–µ–Ω–¥–µ
     */
    generateRentalInfo(chatId) {
        const { plans } = this.config.rental;
        
        let message = `üí∞ *ÍßÅ‡º∫ ùì¢ùì∏ùìØùì≤ùîÇùì™ ‡ºªÍßÇ - –ê—Ä–µ–Ω–¥–∞ –±–æ—Ç–∞*\n\n`;
        message += `üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:*\n\n`;

        for (const [key, plan] of Object.entries(plans)) {
            message += `üîπ *${plan.name}* - ${plan.price} ${this.config.rental.currency}\n`;
            message += `   ‚è±Ô∏è –°—Ä–æ–∫: ${plan.duration} —á–∞—Å–æ–≤\n\n`;
        }

        message += `üí≥ *–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:*\n`;
        message += `üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: wa.me/${this.config.bot.ownerNumber}\n\n`;
        message += `üÜî *ID –≥—Ä—É–ø–ø—ã:* \`${chatId}\``;

        return message;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–∞–≤
     */
    async sendNoPermission(chatId) {
        await this.bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    async isUserAdmin(chatId, userId) {
        return await this.bot.messageHandler.isUserAdmin(chatId, userId);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
     */
    isOwner(userId) {
        return this.bot.messageHandler.isOwner(userId);
    }
}

module.exports = CommandHandler; 