const moment = require('moment');
const Logger = require('../utils/logger');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –≥—Ä—É–ø–ø—ã –¥–ª—è –±–æ—Ç–∞ ÍßÅ‡º∫ ùì¢ùì∏ùìØùì≤ùîÇùì™ ‡ºªÍßÇ
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–æ–∫–∏–¥–∞–Ω–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø
 */
class EventHandler {
    constructor(bot) {
        this.bot = bot;
        this.logger = new Logger('EVENT');
        this.config = bot.config;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
     */
    async handleParticipantUpdate(participantUpdate) {
        try {
            const { id: groupId, participants, action } = participantUpdate;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ
            if (!this.bot.hasGroupAccess(groupId)) {
                return;
            }

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥—Ä—É–ø–ø—ã
            const settings = this.bot.database.getGroupSettings(groupId);

            switch (action) {
                case 'add':
                    await this.handleParticipantAdd(groupId, participants, settings);
                    break;
                case 'remove':
                    await this.handleParticipantRemove(groupId, participants, settings);
                    break;
                case 'promote':
                    await this.handleParticipantPromote(groupId, participants, settings);
                    break;
                case 'demote':
                    await this.handleParticipantDemote(groupId, participants, settings);
                    break;
            }

        } catch (error) {
            this.logger.error('Participant update error:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    async handleParticipantAdd(groupId, participants, settings) {
        try {
            for (const participant of participants) {
                // –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await this.bot.database.recordActivity(groupId, participant, 'join');

                // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                if (settings.moderation.welcome) {
                    await this.sendWelcomeMessage(groupId, participant);
                }

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
                if (settings.moderation.autoAdmin) {
                    await this.handleAutoAdmin(groupId, participant);
                }

                this.logger.info(`User ${participant} joined group ${groupId}`);
            }

        } catch (error) {
            this.logger.error('Handle participant add error:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∏–¥–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    async handleParticipantRemove(groupId, participants, settings) {
        try {
            for (const participant of participants) {
                this.logger.info(`User ${participant} left group ${groupId}`);

                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫–∏–¥–∞–Ω–∏–∏
                if (settings.moderation.farewell) {
                    const message = `üëã @${participant.split('@')[0]} –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É`;
                    await this.bot.sendMessage(groupId, message, {
                        mentions: [participant]
                    });
                }
            }

        } catch (error) {
            this.logger.error('Handle participant remove error:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    async handleParticipantPromote(groupId, participants, settings) {
        try {
            for (const participant of participants) {
                this.logger.info(`User ${participant} promoted in group ${groupId}`);

                const message = `üéâ @${participant.split('@')[0]} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!`;
                await this.bot.sendMessage(groupId, message, {
                    mentions: [participant]
                });
            }

        } catch (error) {
            this.logger.error('Handle participant promote error:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    async handleParticipantDemote(groupId, participants, settings) {
        try {
            for (const participant of participants) {
                this.logger.info(`User ${participant} demoted in group ${groupId}`);

                const message = `üìâ @${participant.split('@')[0]} —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞`;
                await this.bot.sendMessage(groupId, message, {
                    mentions: [participant]
                });
            }

        } catch (error) {
            this.logger.error('Handle participant demote error:', error);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async sendWelcomeMessage(groupId, participant) {
        try {
            const groupInfo = await this.bot.getGroupInfo(groupId);
            const groupName = groupInfo?.subject || '–≥—Ä—É–ø–ø—É';

            const welcomeMessage = `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *${groupName}*, @${participant.split('@')[0]}!\n\nü§ñ –Ø –±–æ—Ç ÍßÅ‡º∫ ùì¢ùì∏ùìØùì≤ùîÇùì™ ‡ºªÍßÇ - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã.\n\nüìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É #–ø–æ–º–æ—â—å`;

            await this.bot.sendMessage(groupId, welcomeMessage, {
                mentions: [participant]
            });

        } catch (error) {
            this.logger.error('Send welcome message error:', error);
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    async handleAutoAdmin(groupId, participant) {
        try {
            // –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
            // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö
            const trustedUsers = this.config.security.trustedUsers || [];
            
            if (trustedUsers.includes(participant.split('@')[0])) {
                // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                await this.bot.sock.groupParticipantsUpdate(groupId, [participant], 'promote');
                
                const message = `‚ö° @${participant.split('@')[0]} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`;
                await this.bot.sendMessage(groupId, message, {
                    mentions: [participant]
                });

                this.logger.info(`Auto-admin promoted: ${participant} in ${groupId}`);
            }

        } catch (error) {
            this.logger.error('Handle auto admin error:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã
     */
    async handleGroupUpdate(groupsUpdate) {
        try {
            for (const update of groupsUpdate) {
                const { id: groupId, subject, announce } = update;

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ
                if (!this.bot.hasGroupAccess(groupId)) {
                    continue;
                }

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                if (subject) {
                    const groupData = this.bot.database.getGroup(groupId) || {};
                    groupData.name = subject;
                    await this.bot.database.setGroup(groupId, groupData);
                    this.logger.info(`Group ${groupId} name changed to: ${subject}`);
                }
            }

        } catch (error) {
            this.logger.error('Group update error:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    async handleMessageDelete(deleteInfo) {
        try {
            const { remoteJid: groupId, fromMe, id, participant } = deleteInfo;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ
            if (!this.bot.hasGroupAccess(groupId)) {
                return;
            }

            // –ü—Ä–æ–ø—É—Å–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∏–π
            if (fromMe) {
                return;
            }

            const settings = this.bot.database.getGroupSettings(groupId);

            // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç —É–¥–∞–ª–µ–Ω–∏—è
            if (settings.antiSpam.antiDelete && participant) {
                const message = `üö´ @${participant.split('@')[0]} —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã.`;
                
                await this.bot.sendMessage(groupId, message, {
                    mentions: [participant]
                });

                this.logger.moderation(groupId, 'message_deleted', participant);
            }

        } catch (error) {
            this.logger.error('Message delete error:', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∞—Ä–µ–Ω–¥ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    async checkExpiringRentals() {
        try {
            const expiringRentals = this.bot.database.getExpiringRentals(24); // –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤

            for (const rental of expiringRentals) {
                const timeLeft = moment(rental.endDate).fromNow();
                
                const message = `‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*\n\n–ê—Ä–µ–Ω–¥–∞ –±–æ—Ç–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –∏—Å—Ç–µ–∫–∞–µ—Ç ${timeLeft}.\n\nüí∞ –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\nwa.me/${this.config.bot.ownerNumber}\n\nüÜî ID –≥—Ä—É–ø–ø—ã: \`${rental.groupId}\``;
                
                await this.bot.sendMessage(rental.groupId, message);
                
                this.logger.rental(rental.groupId, 'expiration_warning', { timeLeft });
            }

        } catch (error) {
            this.logger.error('Check expiring rentals error:', error);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
     */
    async cleanupInactiveUsers(groupId, days = 90) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ
            if (!this.bot.hasGroupAccess(groupId)) {
                return;
            }

            const inactiveUsers = this.bot.database.getInactiveUsers(groupId, days);
            
            if (inactiveUsers.length === 0) {
                return;
            }

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            const message = `üìä *–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤*\n\n–ù–∞–π–¥–µ–Ω–æ ${inactiveUsers.length} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ ${days} –¥–Ω–µ–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É #–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞.`;
            
            await this.bot.sendMessage(groupId, message);
            
            this.logger.info(`Found ${inactiveUsers.length} inactive users in group ${groupId}`);

        } catch (error) {
            this.logger.error('Cleanup inactive users error:', error);
        }
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    async generateActivityReport(groupId) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ
            if (!this.bot.hasGroupAccess(groupId)) {
                return;
            }

            const groupInfo = await this.bot.getGroupInfo(groupId);
            if (!groupInfo) return;

            const totalParticipants = groupInfo.participants.length;
            const activeWeek = totalParticipants - this.bot.database.getInactiveUsers(groupId, 7).length;
            const activeMonth = totalParticipants - this.bot.database.getInactiveUsers(groupId, 30).length;
            
            const rental = this.bot.database.getRental(groupId);
            
            let report = `üìà *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*\n\n`;
            report += `üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${totalParticipants}\n`;
            report += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é: ${activeWeek} (${Math.round(activeWeek/totalParticipants*100)}%)\n`;
            report += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü: ${activeMonth} (${Math.round(activeMonth/totalParticipants*100)}%)\n\n`;
            
            if (rental) {
                const timeLeft = moment(rental.endDate).fromNow();
                report += `üí∞ –ê—Ä–µ–Ω–¥–∞: ${rental.plan}\n`;
                report += `‚è∞ –ò—Å—Ç–µ–∫–∞–µ—Ç: ${timeLeft}\n\n`;
            }
            
            report += `ü§ñ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –±–æ—Ç–æ–º ÍßÅ‡º∫ ùì¢ùì∏ùìØùì≤ùîÇùì™ ‡ºªÍßÇ`;

            await this.bot.sendMessage(groupId, report);
            
            this.logger.info(`Activity report generated for group ${groupId}`);

        } catch (error) {
            this.logger.error('Generate activity report error:', error);
        }
    }
}

module.exports = EventHandler; 