const { jidNormalizedUser, getContentType } = require('@whiskeysockets/baileys');
const moment = require('moment');
const Logger = require('../utils/logger');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
 */
class MessageHandler {
    constructor(bot) {
        this.bot = bot;
        this.logger = new Logger('MESSAGE');
        this.config = bot.config;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    async handle(messageInfo) {
        try {
            const { messages, type } = messageInfo;
            
            if (type !== 'notify') return;

            for (const message of messages) {
                await this.processMessage(message);
            }
        } catch (error) {
            this.logger.error('Message handling error:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async processMessage(message) {
        try {
            // –ü—Ä–æ–ø—É—Å–∫ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if (!message.message || message.key.fromMe) return;

            const messageInfo = this.extractMessageInfo(message);
            if (!messageInfo) return;

            // –ó–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (messageInfo.isGroup) {
                await this.bot.database.recordActivity(
                    messageInfo.chatId, 
                    messageInfo.senderId,
                    'message'
                );
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ
            if (messageInfo.isGroup && !this.bot.hasGroupAccess(messageInfo.chatId)) {
                await this.handleNoAccess(messageInfo);
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if (messageInfo.text.startsWith(this.config.bot.prefix)) {
                await this.bot.commandHandler.handle(messageInfo);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
            if (messageInfo.isGroup) {
                await this.checkAntiSpam(messageInfo);
            }

        } catch (error) {
            this.logger.error('Message processing error:', error);
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    extractMessageInfo(message) {
        try {
            const messageContent = message.message;
            const messageType = getContentType(messageContent);
            
            if (!messageType) return null;

            const chatId = message.key.remoteJid;
            const senderId = jidNormalizedUser(message.key.participant || chatId);
            const isGroup = chatId.endsWith('@g.us');
            
            let text = '';
            let quotedMessage = null;

            // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            switch (messageType) {
                case 'conversation':
                    text = messageContent.conversation;
                    break;
                case 'extendedTextMessage':
                    text = messageContent.extendedTextMessage.text;
                    quotedMessage = messageContent.extendedTextMessage.contextInfo?.quotedMessage;
                    break;
                case 'imageMessage':
                    text = messageContent.imageMessage.caption || '';
                    break;
                case 'videoMessage':
                    text = messageContent.videoMessage.caption || '';
                    break;
                default:
                    return null;
            }

            return {
                message,
                chatId,
                senderId,
                text: text.trim(),
                isGroup,
                messageType,
                quotedMessage,
                timestamp: moment(message.messageTimestamp * 1000),
                messageId: message.key.id
            };

        } catch (error) {
            this.logger.error('Message info extraction error:', error);
            return null;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ
     */
    async handleNoAccess(messageInfo) {
        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∞—Ä–µ–Ω–¥—ã
        if (messageInfo.text.startsWith('.–∞—Ä–µ–Ω–¥–∞') || messageInfo.text.startsWith('.—á–µ–∫–∞—Ä–µ–Ω–¥—ã')) {
            const rentalInfo = this.generateRentalInfo();
            await this.bot.sendMessage(messageInfo.chatId, rentalInfo);
            
            this.logger.info(`No access denied for group: ${messageInfo.chatId}`);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Ä–µ–Ω–¥–µ
     */
    generateRentalInfo() {
        const { plans } = this.config.rental;
        
        let message = `üí∞ *ÍßÅ‡º∫ ùì¢ùì∏ùìØùì≤ùîÇùì™ ‡ºªÍßÇ - –ê—Ä–µ–Ω–¥–∞ –±–æ—Ç–∞*\n\n`;
        message += `üö´ *–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω*\n\n`;
        message += `üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:*\n\n`;

        for (const [key, plan] of Object.entries(plans)) {
            message += `üîπ *${plan.name}* - ${plan.price} ${this.config.rental.currency}\n`;
            message += `   ‚è±Ô∏è –°—Ä–æ–∫: ${plan.duration} —á–∞—Å–æ–≤\n\n`;
        }

        message += `üí≥ *–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:*\n`;
        message += `1Ô∏è‚É£ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n`;
        message += `2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ\n`;
        message += `3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –±–æ—Ç–∞\n\n`;
        
        message += `üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* wa.me/${this.config.bot.ownerNumber}\n`;
        message += `üÜî *ID –≥—Ä—É–ø–ø—ã:* \`${messageInfo.chatId}\``;

        return message;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
     */
    async checkAntiSpam(messageInfo) {
        try {
            const settings = this.bot.database.getGroupSettings(messageInfo.chatId);
            const { antiSpam } = settings;
            const text = messageInfo.text.toLowerCase();

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å—Å—ã–ª–æ–∫
            if (antiSpam.antiLink && this.containsLink(text)) {
                await this.handleAntiLink(messageInfo, 'antiLink');
                return;
            }

            if (antiSpam.antiLink2 && this.containsAdvancedLink(text)) {
                await this.handleAntiLink(messageInfo, 'antiLink2');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏–≤—ã–∑–æ–≤–æ–≤
            if (antiSpam.antiCall && this.isSpamCall(text)) {
                await this.handleAntiCall(messageInfo);
                return;
            }

        } catch (error) {
            this.logger.error('Anti-spam check error:', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏ (–±–∞–∑–æ–≤–∞—è)
     */
    containsLink(text) {
        const linkPatterns = [
            /https?:\/\/[^\s]+/gi,
            /www\.[^\s]+/gi,
            /[^\s]+\.(com|org|net|io|me|co|ru)/gi,
            /t\.me\/[^\s]+/gi,
            /chat\.whatsapp\.com\/[^\s]+/gi
        ];

        return linkPatterns.some(pattern => pattern.test(text));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è)
     */
    containsAdvancedLink(text) {
        const advancedPatterns = [
            /[a-zA-Z0-9]+ ?\. ?[a-zA-Z0-9]+/g, // –¥–æ–º–µ–Ω—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
            /[^\s]*\*[^\s]*\.[^\s]*/g, // –¥–æ–º–µ–Ω—ã —Å–æ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
            /[^\s]*\([^\s]*\)\.[^\s]*/g, // –¥–æ–º–µ–Ω—ã –≤ —Å–∫–æ–±–∫–∞—Ö
        ];

        return advancedPatterns.some(pattern => pattern.test(text));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-–≤—ã–∑–æ–≤—ã
     */
    isSpamCall(text) {
        const spamPatterns = [
            /@[0-9]{10,}/g, // –º–∞—Å—Å–æ–≤—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä–∞–º
            /(@[^\s]+ ){5,}/g, // –º–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–¥—Ä—è–¥
        ];

        return spamPatterns.some(pattern => pattern.test(text));
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∞–Ω—Ç–∏—Å—Å—ã–ª–æ–∫
     */
    async handleAntiLink(messageInfo, type) {
        try {
            // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await this.bot.sock.sendMessage(messageInfo.chatId, {
                delete: messageInfo.message.key
            });

            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            const warning = `‚ö†Ô∏è @${messageInfo.senderId.split('@')[0]} –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞!\n\nüö´ –°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ`;
            
            await this.bot.sendMessage(messageInfo.chatId, warning, {
                mentions: [messageInfo.senderId]
            });

            this.logger.moderation(messageInfo.chatId, `${type}_violation`, messageInfo.senderId);

        } catch (error) {
            this.logger.error('Anti-link handling error:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∞–Ω—Ç–∏–≤—ã–∑–æ–≤–æ–≤
     */
    async handleAntiCall(messageInfo) {
        try {
            // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await this.bot.sock.sendMessage(messageInfo.chatId, {
                delete: messageInfo.message.key
            });

            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            const warning = `‚ö†Ô∏è @${messageInfo.senderId.split('@')[0]} –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞!\n\nüö´ –ú–∞—Å—Å–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã`;
            
            await this.bot.sendMessage(messageInfo.chatId, warning, {
                mentions: [messageInfo.senderId]
            });

            this.logger.moderation(messageInfo.chatId, 'anticall_violation', messageInfo.senderId);

        } catch (error) {
            this.logger.error('Anti-call handling error:', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    async isUserAdmin(chatId, userId) {
        try {
            const groupInfo = await this.bot.getGroupInfo(chatId);
            if (!groupInfo) return false;

            const participant = groupInfo.participants.find(p => p.id === userId);
            return participant && (participant.admin === 'admin' || participant.admin === 'superadmin');

        } catch (error) {
            this.logger.error('Admin check error:', error);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
     */
    isOwner(userId) {
        return userId.includes(this.config.bot.ownerNumber);
    }
}

module.exports = MessageHandler; 