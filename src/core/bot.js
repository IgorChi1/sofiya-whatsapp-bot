const { 
    default: makeWASocket, 
    DisconnectReason, 
    useMultiFileAuthState,
    jidNormalizedUser,
    proto,
    getContentType,
    downloadContentFromMessage
} = require('@whiskeysockets/baileys');

const qrcode = require('qrcode-terminal');
const fs = require('fs-extra');
const path = require('path');
const moment = require('moment');
const cron = require('node-cron');

// –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏
const Database = require('./database');
const Logger = require('../utils/logger');
const MessageHandler = require('../handlers/messageHandler');
const CommandHandler = require('../handlers/commandHandler');
const EventHandler = require('../handlers/eventHandler');

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ ÍßÅ‡º∫ ùì¢ùì∏ùìØùì≤ùîÇùì™ ‡ºªÍßÇ
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º —Å WhatsApp –∏ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
 */
class SofiyaBot {
    constructor(config) {
        this.config = config;
        this.logger = new Logger('BOT');
        this.database = new Database();
        
        // WhatsApp —Å–æ–∫–µ—Ç
        this.sock = null;
        this.authState = null;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.messageHandler = null;
        this.commandHandler = null;
        this.eventHandler = null;
        
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        this.isConnected = false;
        this.activeGroups = new Set();
        this.rateLimiter = new Map(); // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–º–µ–Ω—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        moment.locale('ru');
    }

    /**
     * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
     */
    async start() {
        try {
            this.logger.info('Starting Sofiya bot...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await this.database.initialize();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            await this.setupAuth();
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await this.createConnection();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            this.initializeHandlers();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
            this.startCronJobs();
            
            this.logger.success('Bot started successfully!');
            
        } catch (error) {
            this.logger.error('Failed to start bot:', error);
            throw error;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    async setupAuth() {
        const authDir = path.join(process.cwd(), 'sessions');
        await fs.ensureDir(authDir);
        
        this.authState = await useMultiFileAuthState(authDir);
        this.logger.info('Auth state initialized');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å WhatsApp
     */
    async createConnection() {
        this.sock = makeWASocket({
            auth: this.authState.state,
            printQRInTerminal: false, // –ú—ã —Å–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º QR
            browser: ['Sofiya Bot', 'Chrome', '10.15.7'],
            connectTimeoutMs: 30000,
            defaultQueryTimeoutMs: 60000,
            keepAliveIntervalMs: 30000,
            generateHighQualityLinkPreview: false,
            markOnlineOnConnect: false,
            maxMsgRetryCount: 2,
            msgRetryCounterMap: {},
            retryRequestDelayMs: 5000
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
     */
    initializeHandlers() {
        this.messageHandler = new MessageHandler(this);
        this.commandHandler = new CommandHandler(this);
        this.eventHandler = new EventHandler(this);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        this.sock.ev.on('creds.update', this.authState.saveCreds);

        // –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.sock.ev.on('connection.update', (update) => {
            this.handleConnectionUpdate(update);
        });

        // –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.sock.ev.on('messages.upsert', (messageInfo) => {
            this.messageHandler.handle(messageInfo);
        });

        // –°–æ–±—ã—Ç–∏—è –≥—Ä—É–ø–ø
        this.sock.ev.on('group-participants.update', (participantUpdate) => {
            this.eventHandler.handleParticipantUpdate(participantUpdate);
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø
        this.sock.ev.on('groups.update', (groupsUpdate) => {
            this.eventHandler.handleGroupUpdate(groupsUpdate);
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    async handleConnectionUpdate(update) {
        const { connection, lastDisconnect, qr } = update;

        if (qr) {
            console.log('\nüîó QR Code –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
            qrcode.generate(qr, { small: true });
            console.log('\nüì± –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –≤ WhatsApp Web\n');
        }

        if (connection === 'close') {
            this.isConnected = false;
            const shouldReconnect = (lastDisconnect?.error)?.output?.statusCode !== DisconnectReason.loggedOut;
            
            this.logger.warn('Connection closed:', lastDisconnect?.error);
            
            if (shouldReconnect) {
                this.logger.info('Attempting to reconnect...');
                setTimeout(() => this.createConnection(), 5000);
            } else {
                this.logger.error('Bot logged out, manual restart required');
            }
        } else if (connection === 'open') {
            this.isConnected = true;
            this.logger.success('WhatsApp connection established');
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø
            await this.loadActiveGroups();
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É
            await this.notifyOwner('ü§ñ –ë–æ—Ç ÍßÅ‡º∫ ùì¢ùì∏ùìØùì≤ùîÇùì™ ‡ºªÍßÇ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø
     */
    async loadActiveGroups() {
        try {
            const groups = await this.sock.groupFetchAllParticipating();
            let activeCount = 0;

            for (const [groupId, groupData] of Object.entries(groups)) {
                if (this.database.isRentalActive(groupId) || groupId === this.config.bot.ownerNumber) {
                    this.activeGroups.add(groupId);
                    activeCount++;
                    
                    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã
                    await this.database.setGroup(groupId, {
                        name: groupData.subject,
                        participants: groupData.participants?.length || 0,
                        lastUpdate: moment().toISOString()
                    });
                }
            }

            this.logger.info(`Loaded ${activeCount} active groups`);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≥—Ä—É–ø–ø
            if (activeCount > this.config.limits.maxGroups) {
                this.logger.warn(`Active groups (${activeCount}) exceed limit (${this.config.limits.maxGroups})`);
            }
            
        } catch (error) {
            this.logger.error('Failed to load groups:', error);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
     */
    startCronJobs() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∞—Ä–µ–Ω–¥ –∫–∞–∂–¥—ã–π —á–∞—Å
        cron.schedule('0 * * * *', async () => {
            await this.checkExpiredRentals();
        });

        // –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        cron.schedule('0 */6 * * *', async () => {
            await this.database.createBackup();
        });

        // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
        cron.schedule('0 0 * * 0', async () => {
            await this.logger.cleanOldLogs();
        });

        // –û—á–∏—Å—Ç–∫–∞ rate limiter –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        cron.schedule('*/15 * * * *', () => {
            this.rateLimiter.clear();
        });

        this.logger.info('Cron jobs started');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∞—Ä–µ–Ω–¥
     */
    async checkExpiredRentals() {
        try {
            // –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö
            const expired = await this.database.deactivateExpiredRentals();
            if (expired > 0) {
                this.logger.info(`Deactivated ${expired} expired rentals`);
            }

            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏
            const expiring = this.database.getExpiringRentals(24);
            for (const rental of expiring) {
                await this.notifyExpiringRental(rental);
            }

        } catch (error) {
            this.logger.error('Failed to check expired rentals:', error);
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏—Å—Ç–µ–∫–∞—é—â–µ–π –∞—Ä–µ–Ω–¥–µ
     */
    async notifyExpiringRental(rental) {
        const timeLeft = moment(rental.endDate).fromNow();
        const message = `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ!\n\n–ê—Ä–µ–Ω–¥–∞ –±–æ—Ç–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –∏—Å—Ç–µ–∫–∞–µ—Ç ${timeLeft}.\n\n–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É .–∞—Ä–µ–Ω–¥–∞`;
        
        await this.sendMessage(rental.groupId, message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async sendMessage(chatId, message, options = {}) {
        try {
            if (!this.isConnected) {
                this.logger.warn('Cannot send message: not connected');
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
            if (this.isRateLimited(chatId)) {
                this.logger.warn(`Rate limited for chat: ${chatId}`);
                return false;
            }

            await this.sock.sendMessage(chatId, { text: message, ...options });
            this.updateRateLimit(chatId);
            
            return true;
            
        } catch (error) {
            this.logger.error('Failed to send message:', error);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
     */
    isRateLimited(chatId) {
        const now = Date.now();
        const limit = this.rateLimiter.get(chatId) || { count: 0, resetTime: now };
        
        if (now > limit.resetTime) {
            limit.count = 0;
            limit.resetTime = now + 60000; // 1 –º–∏–Ω—É—Ç–∞
        }
        
        return limit.count >= this.config.limits.messagesPerMinute;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ rate limiting
     */
    updateRateLimit(chatId) {
        const now = Date.now();
        const limit = this.rateLimiter.get(chatId) || { count: 0, resetTime: now + 60000 };
        
        limit.count++;
        this.rateLimiter.set(chatId, limit);
    }

    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
     */
    async notifyOwner(message) {
        if (this.config.bot.ownerNumber) {
            await this.sendMessage(this.config.bot.ownerNumber + '@s.whatsapp.net', message);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ
     */
    hasGroupAccess(groupId) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∞—Ä–µ–Ω–¥—ã
        if (this.database.isRentalActive(groupId)) {
            return true;
        }
        
        // –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø (72 —á–∞—Å–∞)
        const groupData = this.database.getGroup(groupId);
        if (groupData && groupData.joinDate) {
            const joinTime = moment(groupData.joinDate);
            const hoursSinceJoin = moment().diff(joinTime, 'hours');
            
            if (hoursSinceJoin <= this.config.rental.defaultTrial) {
                return true;
            }
        }
        
        // –ù–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö - –¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥
        if (!groupData) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            this.database.setGroup(groupId, {
                joinDate: moment().toISOString(),
                trialStarted: true
            });
            return true;
        }
        
        return false;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    async getUserInfo(userId) {
        try {
            const info = await this.sock.onWhatsApp(userId);
            return info?.[0] || null;
        } catch (error) {
            this.logger.error('Failed to get user info:', error);
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
     */
    async getGroupInfo(groupId) {
        try {
            const metadata = await this.sock.groupMetadata(groupId);
            return metadata;
        } catch (error) {
            this.logger.error('Failed to get group info:', error);
            return null;
        }
    }

    /**
     * –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
     */
    async shutdown() {
        this.logger.info('Shutting down bot...');
        
        if (this.sock) {
            await this.sock.logout();
        }
        
        await this.database.createBackup();
        this.logger.info('Bot shutdown complete');
    }
}

module.exports = SofiyaBot; 